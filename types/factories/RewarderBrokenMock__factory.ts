/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { RewarderBrokenMock } from "../RewarderBrokenMock";

export class RewarderBrokenMock__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<RewarderBrokenMock> {
    return super.deploy(overrides || {}) as Promise<RewarderBrokenMock>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): RewarderBrokenMock {
    return super.attach(address) as RewarderBrokenMock;
  }
  connect(signer: Signer): RewarderBrokenMock__factory {
    return super.connect(signer) as RewarderBrokenMock__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): RewarderBrokenMock {
    return new Contract(address, _abi, signerOrProvider) as RewarderBrokenMock;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "onSushiReward",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "pid",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "sushiAmount",
        type: "uint256",
      },
    ],
    name: "pendingTokens",
    outputs: [
      {
        internalType: "contract IERC20[]",
        name: "rewardTokens",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "rewardAmounts",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506101a2806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80638bf637421461003b578063d63b3c491461008c575b600080fd5b61008a600480360360a081101561005157600080fd5b5080359073ffffffffffffffffffffffffffffffffffffffff602082013581169160408101359091169060608101359060800135610036565b005b6100cb600480360360608110156100a257600080fd5b5080359073ffffffffffffffffffffffffffffffffffffffff6020820135169060400135610164565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b8381101561010f5781810151838201526020016100f7565b50505050905001838103825284818151815260200191508051906020019060200280838360005b8381101561014e578181015183820152602001610136565b5050505090500194505050505060405180910390f35b606080600080fdfea26469706673582212201d226167d40065aae6a56974e57ea8007a2e460bad0d6f4aee34856977d4ec8264736f6c634300060c0033";
