/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, BigNumberish } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { RewarderMock } from "../RewarderMock";

export class RewarderMock__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _rewardMultiplier: BigNumberish,
    _rewardToken: string,
    _MASTERCHEF_V2: string,
    overrides?: Overrides
  ): Promise<RewarderMock> {
    return super.deploy(
      _rewardMultiplier,
      _rewardToken,
      _MASTERCHEF_V2,
      overrides || {}
    ) as Promise<RewarderMock>;
  }
  getDeployTransaction(
    _rewardMultiplier: BigNumberish,
    _rewardToken: string,
    _MASTERCHEF_V2: string,
    overrides?: Overrides
  ): TransactionRequest {
    return super.getDeployTransaction(
      _rewardMultiplier,
      _rewardToken,
      _MASTERCHEF_V2,
      overrides || {}
    );
  }
  attach(address: string): RewarderMock {
    return super.attach(address) as RewarderMock;
  }
  connect(signer: Signer): RewarderMock__factory {
    return super.connect(signer) as RewarderMock__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): RewarderMock {
    return new Contract(address, _abi, signerOrProvider) as RewarderMock;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_rewardMultiplier",
        type: "uint256",
      },
      {
        internalType: "contract IERC20",
        name: "_rewardToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "_MASTERCHEF_V2",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "sushiAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "onSushiReward",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "pid",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "sushiAmount",
        type: "uint256",
      },
    ],
    name: "pendingTokens",
    outputs: [
      {
        internalType: "contract IERC20[]",
        name: "rewardTokens",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "rewardAmounts",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60e060405234801561001057600080fd5b506040516107e33803806107e38339818101604052606081101561003357600080fd5b50805160208201516040909201516080919091526001600160601b0319606092831b811660a052911b1660c05260805160a05160601c60c05160601c61073d6100a66000398061017c525080610235528061030a528061035052806103a8525080610203528061042d525061073d6000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80638bf637421461003b578063d63b3c491461008c575b600080fd5b61008a600480360360a081101561005157600080fd5b5080359073ffffffffffffffffffffffffffffffffffffffff602082013581169160408101359091169060608101359060800135610164565b005b6100cb600480360360608110156100a257600080fd5b5080359073ffffffffffffffffffffffffffffffffffffffff6020820135169060400135610380565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b8381101561010f5781810151838201526020016100f7565b50505050905001838103825284818151815260200191508051906020019060200280838360005b8381101561014e578181015183820152602001610136565b5050505090500194505050505060405180910390f35b3373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146101f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806106e76021913960400191505060405180910390fd5b6000670de0b6b3a7640000610227847f000000000000000000000000000000000000000000000000000000000000000061047d565b8161022e57fe5b04905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156102ba57600080fd5b505afa1580156102ce573d6000803e3d6000fd5b505050506040513d60208110156102e457600080fd5b50519050808211156103365761033173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168683610509565b610377565b61037773ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168684610509565b50505050505050565b60408051600180825281830190925260609182918291602080830190803683370190505090507f0000000000000000000000000000000000000000000000000000000000000000816000815181106103d457fe5b73ffffffffffffffffffffffffffffffffffffffff9290921660209283029190910190910152604080516001808252818301909252606091816020016020820280368337019050509050670de0b6b3a7640000610451867f000000000000000000000000000000000000000000000000000000000000000061047d565b8161045857fe5b048160008151811061046657fe5b602090810291909101015290969095509350505050565b60008115806104985750508082028282828161049557fe5b04145b61050357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f426f72696e674d6174683a204d756c204f766572666c6f770000000000000000604482015290519081900360640190fd5b92915050565b6040805173ffffffffffffffffffffffffffffffffffffffff8481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000178152925182516000946060949389169392918291908083835b602083106105df57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016105a2565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114610641576040519150601f19603f3d011682016040523d82523d6000602084013e610646565b606091505b5091509150818015610674575080511580610674575080806020019051602081101561067157600080fd5b50515b6106df57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f426f72696e6745524332303a205472616e73666572206661696c656400000000604482015290519081900360640190fd5b505050505056fe4f6e6c79204d4356322063616e2063616c6c20746869732066756e6374696f6e2ea264697066735822122063ae3fa3bd2acfceba5dfeeba5633f29eaf583343d0072a6757f92d52387dcd864736f6c634300060c0033";
