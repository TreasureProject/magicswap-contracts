/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { SushiMakerKashiExploitMock } from "../SushiMakerKashiExploitMock";

export class SushiMakerKashiExploitMock__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _sushiMaker: string,
    overrides?: Overrides
  ): Promise<SushiMakerKashiExploitMock> {
    return super.deploy(
      _sushiMaker,
      overrides || {}
    ) as Promise<SushiMakerKashiExploitMock>;
  }
  getDeployTransaction(
    _sushiMaker: string,
    overrides?: Overrides
  ): TransactionRequest {
    return super.getDeployTransaction(_sushiMaker, overrides || {});
  }
  attach(address: string): SushiMakerKashiExploitMock {
    return super.attach(address) as SushiMakerKashiExploitMock;
  }
  connect(signer: Signer): SushiMakerKashiExploitMock__factory {
    return super.connect(signer) as SushiMakerKashiExploitMock__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SushiMakerKashiExploitMock {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as SushiMakerKashiExploitMock;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_sushiMaker",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "contract IKashiWithdrawFee",
        name: "kashiPair",
        type: "address",
      },
    ],
    name: "convert",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "sushiMaker",
    outputs: [
      {
        internalType: "contract SushiMakerKashi",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60a060405234801561001057600080fd5b506040516102093803806102098339818101604052602081101561003357600080fd5b5051606081901b6001600160601b0319166080526001600160a01b031661019f61006a6000398060a3528060c7525061019f6000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80632bbdf75b1461003b578063def2489b1461006c575b600080fd5b6100436100a1565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b61009f6004803603602081101561008257600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166100c5565b005b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663def2489b826040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b15801561014e57600080fd5b505af1158015610162573d6000803e3d6000fd5b505050505056fea2646970667358221220e03a0f70a40701b84b5a5dac210808895b0d8f7279868dbafabe88ba1c654b0764736f6c634300060c0033";
